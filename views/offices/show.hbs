<div class="row">
    <div class="col s12 m8">
        <h3>office: {{office.title}}
            {{!-- <small>{{{editIcon office.user user office._id false}}}</small> --}}
        </h3>
        <div class="card office">
            <div class="card-content">
                Date: <span class="card-title">{{formatDate date 'MMMM Do YYYY, h:mm:ss a'}}</span>
                DeviceId: <span class="card-title">{{{office.deviceId}}}</span>
            </div>
        </div>
    </div>
    <div class="col s12 m4">
        <div class="card center-align">
            <div class="card-content">
                <span class="card-title">{{office.user.displayName}}</span>
                <img src="{{office.user.image}}" class="circle responsive-img img-small">
            </div>
            <div class="card-action">
                <a href="/stories/user/{{office.user._id}}">More From {{office.user.firstName}}</a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col s12 m12">
            <div>
                <div>
                    {{!-- <span>
                        <span id="deviceCount">0 devices</span>
                        <select id="listOfDevices" class="select_box"></select>
                    </span> --}}
                    <span>Temperature & Humidity Real-time Data</span>
                    <div>
                        <canvas id="iotChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.4.0.min.js" integrity="sha256-BJeo0qm959uMBGb65z40ejJYGSgR7REI4+CW1fNKwOg=" crossorigin="anonymous" type="text/javascript" charset="utf-8"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js" type="text/javascript" charset="utf-8"></script>

<script type="application/javascript">
$(document).ready(() => {  
    // if deployed to a site supporting SSL, use wss://
    const protocol = document.location.protocol.startsWith('https') ? 'wss://' : 'ws://';
    const webSocket = new WebSocket(protocol + location.host);

    // A class for holding the last N points of telemetry for a device
    class DeviceData {
      constructor(deviceId) {
        this.deviceId = deviceId;
        this.maxLen = 50;
        this.timeData = new Array(this.maxLen);
        this.temperatureData = new Array(this.maxLen);
        this.humidityData = new Array(this.maxLen);
      }
  
      addData(time, temperature, humidity) {
        this.timeData.push(time);
        this.temperatureData.push(temperature);
        this.humidityData.push(humidity || null);
  
        if (this.timeData.length > this.maxLen) {
          this.timeData.shift();
          this.temperatureData.shift();
          this.humidityData.shift();
        }
      }
    }

    const newDeviceData = new DeviceData("{{office.deviceId}}");
  
    // Define the chart axes
    const chartData = {
      datasets: [
        {
          fill: false,
          label: 'Temperature',
          yAxisID: 'Temperature',
          borderColor: 'rgba(255, 204, 0, 1)',
          pointBoarderColor: 'rgba(255, 204, 0, 1)',
          backgroundColor: 'rgba(255, 204, 0, 0.4)',
          pointHoverBackgroundColor: 'rgba(255, 204, 0, 1)',
          pointHoverBorderColor: 'rgba(255, 204, 0, 1)',
          spanGaps: true,
        },
        {
          fill: false,
          label: 'Humidity',
          yAxisID: 'Humidity',
          borderColor: 'rgba(24, 120, 240, 1)',
          pointBoarderColor: 'rgba(24, 120, 240, 1)',
          backgroundColor: 'rgba(24, 120, 240, 0.4)',
          pointHoverBackgroundColor: 'rgba(24, 120, 240, 1)',
          pointHoverBorderColor: 'rgba(24, 120, 240, 1)',
          spanGaps: true,
        }
      ]
    };

    chartData.labels = newDeviceData.timeData;
    chartData.datasets[0].data = newDeviceData.temperatureData;
    chartData.datasets[1].data = newDeviceData.humidityData;        

  
    const chartOptions = {
      scales: {
        yAxes: [{
          id: 'Temperature',
          type: 'linear',
          scaleLabel: {
            labelString: 'Temperature (ÂºC)',
            display: true,
          },
          position: 'left',
          ticks:{
            precision: 0
          }
        },
        {
          id: 'Humidity',
          type: 'linear',
          scaleLabel: {
            labelString: 'Humidity (%)',
            display: true,
          },
          position: 'right',
        }]
      }
    };
  
    // Get the context of the canvas element we want to select
    const ctx = document.getElementById('iotChart').getContext('2d');
    const myLineChart = new Chart(
      ctx,
      {
        type: 'line',
        data: chartData,
        options: chartOptions,
      });
  

    // When a web socket message arrives:
    // 1. Unpack it
    // 2. Validate it has date/time and temperature
    // 3. Find or create a cached device to hold the telemetry data
    // 4. Append the telemetry data
    // 5. Update the chart UI
    webSocket.onmessage = function onMessage(message) {
      try {

        const messageData = JSON.parse(message.data);
        console.log(messageData);

        if (!messageData.DeviceId || messageData.DeviceId !== "{{office.deviceId}}") {
            return;
        }

        // time and either temperature or humidity are required
        if (!messageData.MessageDate || (!messageData.IotData.temperature && !messageData.IotData.humidity)) {
          return;
        }
    
        newDeviceData.addData(messageData.MessageDate, messageData.IotData.temperature, messageData.IotData.humidity);
  
        myLineChart.update();
      } catch (err) {
        console.error(err);
      }
    };
  });
  </script>
